/*
 * WebSocketClientSocketIO.ino
 *
 *  Created on: 06.06.2016
 *
 */

#include <Arduino.h>

#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>

#include <WebSocketsClient.h>

#include <Hash.h>
#include <ArduinoJson.h>

#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <WiFiManager.h>


ESP8266WiFiMulti WiFiMulti;
WebSocketsClient webSocket;


#define USE_SERIAL Serial

#define MESSAGE_INTERVAL 5000
#define HEARTBEAT_INTERVAL 25000

/*
Measuring Current Using ACS712
*/
const int analogIn = A0;
int mVperAmp = 185; // use 100 for 20A Module and 66 for 30A Module and 185 for 5A Module
int RawValue= 0;
int ACSoffset = 2500;
double Voltage = 0;
double Amps = 0;

int LED = 5;

uint64_t messageTimestamp = 0;
uint64_t heartbeatTimestamp = 0;
bool isConnected = false;
String state = "0";

void restart()
{
  USE_SERIAL.printf("[ESP] Restarting\n");
  ESP.restart();
}

void setCurrent()
{
    RawValue = analogRead(analogIn);
    Voltage = (RawValue / 1024.0) * 5000; // Gets you mV
    Amps = ((Voltage - ACSoffset) / mVperAmp);
    Amps = (RawValue * 0.0049 - 2.5)/0.1 ;
}

void printWSc(uint8_t * payload, size_t length)
{
  USE_SERIAL.printf("[WSc] get text: %s size: %d\n", payload, length);
    DynamicJsonBuffer jsonBuffer;
    JsonObject& root = jsonBuffer.parseObject(payload);
    String s = root["S"].as<String>();
    if(s == "1")
    {
      USE_SERIAL.print("[JSON] Data ");
      USE_SERIAL.println(s);
      digitalWrite(LED,HIGH);
      setCurrent();
      state = "Relay: " + s;
    }
    if(s == "0")
    {
      USE_SERIAL.print("[JSON] Data ");
      USE_SERIAL.println(s);
      digitalWrite(LED,LOW);
      setCurrent();
      state = "Relay: " + s;
    }
}

void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) {

    switch(type) {
        case WStype_DISCONNECTED:
            USE_SERIAL.printf("[WSc] Disconnected!\n");
            isConnected = false;
            restart();
            break;
        case WStype_CONNECTED:
            {
                USE_SERIAL.printf("[WSc] Connected to url: %s\n",  payload);
                isConnected = true;

          // send message to server when Connected
                // socket.io upgrade confirmation message (required)
                //webSocket.sendTXT("5");
            }
            break;
        case WStype_TEXT:

             printWSc(payload,length);
            // send message to server
            webSocket.sendTXT(state);
            break;
        case WStype_BIN:
            USE_SERIAL.printf("[WSc] get binary length: %u\n", length);
            hexdump(payload, length);

            // send data to server
            // webSocket.sendBIN(payload, length);
            break;
    }

}

void setup() {
    // USE_SERIAL.begin(921600);
    USE_SERIAL.begin(115200);
    pinMode(LED, OUTPUT);

    //Serial.setDebugOutput(true);
    USE_SERIAL.setDebugOutput(true);

    USE_SERIAL.println();
    USE_SERIAL.println();
    USE_SERIAL.println();

      for(uint8_t t = 4; t > 0; t--) {
          USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
          USE_SERIAL.flush();
          delay(1000);
      }

    WiFiManager wifiManager;
    wifiManager.autoConnect("AutoConnectAP");
    WiFi.mode(WIFI_STA);

    USE_SERIAL.println(WiFi.localIP());

    webSocket.beginSocketIO("192.168.43.64", 9999, "/", "arduino");
//    webSocket.beginSocketIO("192.168.8.102", 9999);

    USE_SERIAL.println("Web Socket begin...");
    //webSocket.setAuthorization("user", "Password"); // HTTP Basic Authorization
    webSocket.onEvent(webSocketEvent);
}

void loop() {
    if(isConnected) {
        uint64_t now = millis();
        if((now - heartbeatTimestamp) > HEARTBEAT_INTERVAL) {
            heartbeatTimestamp = now;
            state = state + " Current: " + Amps;
            webSocket.sendTXT(state);
            delay(500);
            USE_SERIAL.printf(".");
        }
    }
    webSocket.loop();
}
